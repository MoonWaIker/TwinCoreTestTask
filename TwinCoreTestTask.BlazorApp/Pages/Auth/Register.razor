@page "/Register/{Token:guid}"
@using System.Text
@using System.Text.Json
@using TwinCoreTestTask.Dto.DTO
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Register</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary class="text-danger"/>

                        <div class="mb-3">
                            <label for="userName" class="form-label">Username</label>
                            <InputText id="userName" class="form-control" @bind-Value="registerModel.UserName"/>
                            <ValidationMessage For="@(() => registerModel.UserName)"/>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email"/>
                            <ValidationMessage For="@(() => registerModel.Email)"/>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password"
                                       type="password"
                                       class="form-control"
                                       @bind-Value="registerModel.Password"/>
                            <ValidationMessage For="@(() => registerModel.Password)"/>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Register
                            </button>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">@errorMessage</div>
                        }

                        @if (registrationSuccess)
                        {
                            <div class="alert alert-success mt-3">Registration successful! Redirecting to login...</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Guid Token { get; set; }

    private readonly UserRegister registerModel = new();
    private bool isSubmitting;
    private string errorMessage = string.Empty;
    private bool registrationSuccess;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            var json = JsonSerializer.Serialize(registerModel);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await Http.PostAsync($"api/{Token}", content);

            if (response.IsSuccessStatusCode)
            {
                registrationSuccess = true;
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

}
